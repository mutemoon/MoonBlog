import{_ as e,o as a,c as s,O as n}from"./chunks/framework.62a149d4.js";const D=JSON.parse('{"title":"Vue3源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"Learn/FrontEnd/Vue/VueSource.md","filePath":"Learn/FrontEnd/Vue/VueSource.md"}'),o={name:"Learn/FrontEnd/Vue/VueSource.md"},t=n(`<h1 id="vue3源码解析" tabindex="-1">Vue3源码解析 <a class="header-anchor" href="#vue3源码解析" aria-label="Permalink to &quot;Vue3源码解析&quot;">​</a></h1><h2 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h2><p>Proxy 是在 ES6 中才被标准化的。</p><p><strong>官方解释</strong></p><blockquote><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p></blockquote><p><strong>target</strong></p><p>需要被代理的对象，它可以是任何类型的对象，比如数组、函数等等，注意不能是基础数据类型。</p><p>示例代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  let obj = </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">小猪课堂</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    age: </span><span style="color:#F78C6C;">23</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  let p = new Proxy(obj, handler);</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>handler:</p><p>它是一个对象，该对象的属性通常都是一些函数，handler 对象中的这些函数也就是我们的处理器函数，主要定义我们在代理对象后的拦截或者自定义的行为。handler 对象的的属性大概有下面这些，具体使用方法我们在后面章节详解：</p><p>handler.apply() handler.construct() handler.defineProperty() handler.deleteProperty() handler.get() handler.getOwnPropertyDescriptor() handler.getPrototypeOf() handler.has() handler.isExtensible() handler.ownKeys() handler.preventExtensions() handler.set() handler.setPrototypeOf()</p>`,12),r=[t];function l(p,c,d,i,h,y){return a(),s("div",null,r)}const _=e(o,[["render",l]]);export{D as __pageData,_ as default};
